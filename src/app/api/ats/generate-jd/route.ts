import { NextRequest, NextResponse } from "next/server";
import { generateText } from "@/lib/ai/gemini";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    console.log("ðŸ“© generate-jd received:", { hasResumeText: !!body.resumeText });

    const { resumeText } = body;
    if (!resumeText || typeof resumeText !== "string") {
      return NextResponse.json({ error: "Missing or invalid resumeText" }, { status: 400 });
    }

    // Enhanced prompt for better job description generation
    const prompt = `Based on this resume, create a detailed job description for a role that would be a perfect fit for this candidate. The job description should be optimized for ATS systems and include:

1. Job title and company information
2. Job summary (2-3 sentences)
3. Key responsibilities (4-6 bullet points)
4. Required qualifications
5. Preferred qualifications
6. Skills and keywords that match the resume

Make it realistic and tailored to the candidate's experience level and skills. Return only the job description text, no additional commentary.

Resume:
${resumeText.substring(0, 3000)}`; // Limit to avoid token limits

    const text = await generateText(prompt, { 
      temperature: 0.6,
      maxTokens: 2000
    });

    if (text && text.trim()) {
      console.log("âœ… Job description generated successfully");
      return NextResponse.json({ 
        jobDescription: text.trim() 
      }, { status: 200 });
    } else {
      console.error("Empty response from Gemini");
      return NextResponse.json({ 
        error: "No job description generated by AI" 
      }, { status: 500 });
    }

  } catch (err) {
    console.error("generate-jd error:", err);
    const errorMessage = err instanceof Error ? err.message : "Failed to generate job description";
    return NextResponse.json({ 
      error: errorMessage
    }, { status: 500 });
  }
}